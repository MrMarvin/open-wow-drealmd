AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Open-WoW edge location template.
  Contains:
    * An ECS cluster of two nodes
    * one Task Definition for realmd
    * one ELB that exposes running realmd containers
Mappings:
  RegionMap:
    # search for amazon/amzn-ami-2016.09.e-amazon-ecs-optimized
    us-east-1: # N. Viginia
      image: 'ami-d69c74c0'
    us-west-1: # N. California
      image: 'ami-bc90c2dc'
    eu-central-1: # Frankfurt
      image: 'ami-6b428d04'
    ap-southeast-1: # Singapore
      image: 'ami-69208a0a'
    ap-southeast-2: # Sydney
      image: 'ami-307f7853'
Parameters:
  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: 'open-wow-edge'
  EcsInstanceType:
    Type: String
    Description: >
      Specifies the EC2 instance type for your container instances.
      Defaults to t2.micro
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances. If you specify a VPC ID, you must specify a list of
      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created
      with atleast 1 subnet.
    Default: ''
    AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
    ConstraintDescription: >
      VPC Id must begin with 'vpc-' or leave blank to have a
      new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >
      Optional - Specifies the Comma separated list of existing VPC Subnet
      Ids where ECS instances will run
    Default: ''
  SecurityGroupId:
    Type: String
    Description: >
      Optional - Specifies the Security Group Id of an existing Security
      Group. Leave blank to have a new Security Group created
    Default: ''
  VpcCidr:
    Type: String
    Description:  Specifies the CIDR Block of VPC
    Default: '10.0.0.0/16'
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: '10.0.23.0/24'
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: '10.0.42.0/24'
  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 2.
    Default: '2'
  IamRoleInstanceProfile:
    Type: String
    Description: >
      Specifies the Name or the Amazon Resource Name (ARN) of the instance
      profile associated with the IAM role for the instance.
      Defaults to: 'ecsInstanceRole'.
    Default: 'ecsInstanceRole'
  IamRoleService:
    Type: String
    Description: >
      Specifies the Name or the Amazon Resource Name (ARN) of the service
      profile associated with the IAM role for services.
      Defaults to: 'ecsServiceRole'.
    Default: 'ecsServiceRole'
  SecurityIngressFromPort:
    Type: Number
    Description: >
      Optional - Specifies the Start of Security Group port to open on
      ECS instances - defaults to port 0
    Default: '3724'
  SecurityIngressToPort:
    Type: Number
    Description: >
      Optional - Specifies the End of Security Group port to open on ECS
      instances - defaults to port 65535
    Default: '3724'
  SecurityIngressCidrIp:
    Type: String
    Description: >
      Optional - Specifies the CIDR/IP range for Security Ports - defaults
      to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsEndpoint:
    Type: String
    Description: >
      Optional - Specifies the ECS Endpoint for the ECS Agent to connect to
    Default: ''
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs, of the newly created Amazon
      Elastic Block Store (Amazon EBS) volume
    Default: '23'
  EbsVolumeType:
    Type: String
    Description: >
      Optional - Specifies the Type of (Amazon EBS) volume.
      Defaults to: 'gp2'
    Default: 'gp2'
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  DeviceName:
    Type: String
    Description: >
      Optional - Specifies the device mapping for the Volume.
      Defaults to: '/dev/xvdcz'
    Default: '/dev/xvdcz'
  EcsOpenWoWRealmdImageUrl:
    Type: String
    Description: >
      Specifies the URL to the Docker image to run.
      It consists of the repository, image name and tag.
    Default: ''
Conditions:
  SetEndpointToECSAgent:
    !Not [!Equals [!Ref EcsEndpoint, '']]
  CreateNewSecurityGroup:
    !Equals [!Ref SecurityGroupId, '']
  CreateNewVpc:
    !Equals [!Ref VpcId, '']
  CreateSubnet1: !And
    - !Not [!Equals [!Ref SubnetCidr1, '']]
    - !Condition CreateNewVpc
  CreateSubnet2: !And
    - !Not [!Equals [!Ref SubnetCidr2, '']]
    - !Condition CreateSubnet1
  CreateEbsVolume: !And
    - !Not [!Equals [!Ref EbsVolumeSize, '0']]
    - !Not [!Equals [!Ref EbsVolumeType, '']]
    - !Not [!Equals [!Ref DeviceName, '']]
Resources:
  Vpc:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PubSubnetAz1:
    Condition: CreateSubnet1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
  InternetGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  EcsSecurityGroup:
    Condition: CreateNewSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: !Ref SecurityIngressFromPort
        ToPort: !Ref SecurityIngressToPort
        CidrIp: !Ref SecurityIngressCidrIp
  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", 'image']
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref IamRoleInstanceProfile
      KeyName: !Ref "AWS::NoValue"
      SecurityGroups: [ !If [ CreateNewSecurityGroup, !Ref EcsSecurityGroup, !Ref SecurityGroupId ] ]
      BlockDeviceMappings: !If
        - CreateEbsVolume
        -
          - DeviceName: !Ref DeviceName
            Ebs:
             VolumeSize: !Ref EbsVolumeSize
             VolumeType: !Ref EbsVolumeType
        - !Ref "AWS::NoValue"
      UserData: !If
        - SetEndpointToECSAgent
        - Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
           echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config
        - Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If
        - CreateSubnet1
        - !If
          - CreateSubnet2
          - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}" ]
          - [ !Sub "${PubSubnetAz1}" ]
        - !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '0'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: '1'
      LoadBalancerNames:
        - !Ref ElbOpenWoWRealmd
      Tags:
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: 'true'
        -
          Key: Description
          Value: >
            This instance is the part of the Auto Scaling group for open-wow-edge.
          PropagateAtLaunch: 'true'
  ElbOpenWoWRealmd:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      ConnectionDrainingPolicy:
        Enabled: 'True'
        Timeout: '60'
      ConnectionSettings:
        IdleTimeout: '59'
      CrossZone: 'True'
      HealthCheck:
        HealthyThreshold: '10'
        Interval: '30'
        Target: 'TCP:3724'
        Timeout: '2'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '3724'
        InstanceProtocol: 'TCP'
        LoadBalancerPort: '3724'
        Protocol: 'TCP'
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Subnets:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
  EscCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref EcsClusterName
  OpenWoWTaskDefinitionRealmd:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        -
          Name: 'realmd'
          Image: !Ref EcsOpenWoWRealmdImageUrl
          Cpu: '1'
          PortMappings:
            -
              ContainerPort: '3724'
              HostPort: '3724'
          Memory: '256'
          Essential: 'True'
  OpenWoWServiceRealmd:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - EcsInstanceAsg
      - EcsInstanceLc
    Properties:
      Cluster: !Ref EscCluster
      DesiredCount: '2'
      LoadBalancers:
        - ContainerName: 'realmd'
          ContainerPort: '3724'
          LoadBalancerName: !Ref ElbOpenWoWRealmd
      Role: !Ref IamRoleService
      TaskDefinition: !Ref OpenWoWTaskDefinitionRealmd
Outputs:
  ExpElbDNSName:
    Value: !GetAtt ElbOpenWoWRealmd.DNSName
    Export:
      Name: !Sub 'ExpElbDNSName-${AWS::Region}'
